<?xml version="1.0" encoding="UTF-8"?>
<project name="package_rules" default="help">
    <property name="NAMESPACE" value="android___"/>
    <target name="-pre-compile">
        <xmlproperty file="${out.manifest.abs.file}" prefix="mybinmanifest" collapseAttributes="true" />

        <!-- 修改配置包名 -->
        <condition property="has_pkgname"><isset property="pkgname"/></condition>
        <antcall target="replace_pkgname"/>

        <!-- 添加额外配置 -->
        <!-- antcall target="modify_manifest_for_addextra"/-->

        <!-- 添加壳配置 -->
        <condition property="keep_classes_dex_enable"><equals arg1="${keep_classes_dex}" arg2="true"/></condition>
        <antcall target="modify_manifest_for_dexloader"/>

        <!-- 替换自定义的名称空间 -->
        <antcall target="replace_for_namespace"/>
    </target>

    <target name="replace_pkgname" if="has_pkgname">
        <echo>修改成目标包名 : ${pkgname}</echo>
        <replaceregexp byline="false" flags="g" encoding="utf-8">
            <regexp pattern="${mybinmanifest.manifest.package}"/>
            <substitution expression="${pkgname}" />
            <fileset file="${out.manifest.abs.file}"/>
        </replaceregexp>
    </target>

    <target name="modify_manifest_for_dexloader" if="keep_classes_dex_enable">
        <echo>修改壳配置 : ${out.manifest.abs.file}</echo>
        <xmltask source="${out.manifest.abs.file}" dest="${out.manifest.abs.file}" encoding="utf-8" outputter="simple:3">
            <!-- 通过call命令，获取原app名称 -->
            <call path="/manifest/application">
                <param name="appname" path="@android:name" default=""/>
                <actions>
                    <property name="oldappname" value="@{appname}"/>
                </actions>
            </call>

            <!-- 设置壳app名称 -->
            <attr path="/manifest/application" attr="android:name" value="com.loader.dexloader.WrapperApp"/>
        </xmltask>

        <if><condition><not><equals arg1="${oldappname}" arg2=""/></not></condition>
            <then>
                <echo>添加原名称 : ${oldappname}</echo>
                <xmltask source="${out.manifest.abs.file}" dest="${out.manifest.abs.file}" encoding="utf-8" outputter="simple:3">
                    <insert path="/manifest/application" position="under">
                        <![CDATA[<meta-data ${NAMESPACE}name="APPLICATION_CLASS_NAME" ${NAMESPACE}value="${oldappname}" />]]>
                    </insert>
                </xmltask>
            </then>
        </if>
    </target>

    <!-- 添加额外配置 -->
    <target name="modify_manifest_for_addextra">
        <echo>添加额外配置 : ${out.manifest.abs.file}</echo>
        <xmltask source="${out.manifest.abs.file}" dest="${out.manifest.abs.file}" encoding="utf-8" outputter="simple:3">
            <insert path="/manifest/application" position="under">
                <![CDATA[<meta-data ${NAMESPACE}name="TA_APPKEY" ${NAMESPACE}value="${TA_APPKEY}" />]]>
                <![CDATA[<meta-data ${NAMESPACE}name="InstallChannel" ${NAMESPACE}value="${InstallChannel}" />]]>
                <![CDATA[<meta-data ${NAMESPACE}name="releasetime" ${NAMESPACE}value="${RELEASE_TIME}" />]]>
                <![CDATA[<meta-data ${NAMESPACE}name="channelname" ${NAMESPACE}value="${channelname}" />]]>
            </insert>
        </xmltask>
    </target>

    <!-- 处理xmltask因名称空间遗留的问题 -->
    <target name="replace_for_namespace">
        <replaceregexp byline="false" flags="g" encoding="utf-8">
            <regexp pattern="${NAMESPACE}"/>
                <substitution expression="android:" />
            <fileset file="${out.manifest.abs.file}"/>
        </replaceregexp>
    </target>

    <target name="-post-package">
        <condition property="keep_classes_dex_enable"><equals arg1="${keep_classes_dex}" arg2="true"/></condition>
        <antcall target="add_dexloader"/>
    </target>
    <target name="add_dexloader" if="keep_classes_dex_enable">
        <property name="loader_classes_dex" value="${buildpath}/classes.dex"/>
        <property name="real_classes_dex" value="encryptdata.dat"/>
        <property name="classes_dex_jar" location="bin/${real_classes_dex}"/>

        <echo>删除classes.dex文件 </echo>
        <exec executable="${aapt}" failonerror="false">
            <arg value="r"/>
            <arg value="-v"/>
            <arg value="${out.packaged.file}"/>
            <arg value="classes.dex"/>
        </exec>

        <echo>添加${loader_classes_dex}文件 </echo>
        <zip destfile="${out.packaged.file}" update="true">
            <zipfileset
                file="${loader_classes_dex}"
                prefix="" />
        </zip>
        <jar destfile="${classes_dex_jar}">
            <fileset file="${intermediate.dex.file}"/>
        </jar>
        <echo>添加${classes_dex_jar}文件 </echo>
        <zip destfile="${out.packaged.file}" update="true">
            <zipfileset
                file="${classes_dex_jar}"
                prefix="assets" />
        </zip>
    </target>
</project>